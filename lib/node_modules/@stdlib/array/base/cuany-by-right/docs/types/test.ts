/*
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


import * as cuanyByRight from './index';


// TESTS //

// The function returns an array...
{
	cuanyByRight( [ false, false, true, false, false ] ); // $ExpectType boolean[]
	cuanyByRight( [ false, false, true, false, false ] ); // $ExpectType boolean[]
}

// The compiler throws an error if the function is provided a first argument which is not an array-like object...
{
	cuanyByRight( [1] ); // $ExpectError
	cuanyByRight( [true] ); // $ExpectError
	cuanyByRight( [ false ] ); // $ExpectError
	cuanyByRight( [] ); // Provide an empty array as the argument instead of null.
	cuanyByRight( [] ); // Provide an empty array as the argument instead of null.
	cuanyByRight( [] ); // Provide an empty array as the argument instead of an object.
}



// Attached to the main export is an `assign` method which returns a collection...
{
	const x = [ false, false, true, false, false ];
	const y = [ false, null, false, null, false, null, false, null, false, null ];

	cuanyByRight.assign( x, y, 2, 0 ); // $ExpectType (boolean | null)[]
}

// The compiler throws an error if the `assign` method is provided a first argument which is not an array-like object...
{
	const x = [ false, false, true, false, false ];

	cuanyByRight.assign( [1], x, 2, 0 ); // $ExpectError
	cuanyByRight.assign( [true], x, 2, 0 ); // $ExpectError
	cuanyByRight.assign( [false], x, 2, 0 ); // $ExpectError
	cuanyByRight.assign( [], x, 2, 0 ); // $ExpectError
	cuanyByRight.assign( [], x, 2, 0 ); // $ExpectError
	cuanyByRight.assign( [], x, 2, 0 ); // $ExpectError
}

// The compiler throws an error if the `assign` method is provided a second argument which is not an array-like object...
{
	const x = [ false, false, true, false, false ];

	cuanyByRight.assign( x, [1], 2, 0 ); // $ExpectError
	cuanyByRight.assign( x, [true], 2, 0 ); // $ExpectError
	cuanyByRight.assign( x, [false], 2, 0 ); // $ExpectError
	cuanyByRight.assign( x, [], 2, 0 ); // $ExpectError
	cuanyByRight.assign( x,[], 2, 0 ); // $ExpectError
	cuanyByRight.assign( x, [], 2, 0 ); // $ExpectError
}

// The compiler throws an error if the `assign` method is provided a third argument which is not a number...
{
	const x = [ false, false, true, false, false ];
	const y = [ false, null, false, null, false, null, false, null, false, null ];

	cuanyByRight.assign( x, y , 1, 0 ); // $ExpectError
	cuanyByRight.assign( x, y , 2, 0 ); // $ExpectError
	cuanyByRight.assign( x, y , 0, 0 ); // $ExpectError
	cuanyByRight.assign( x, y , 0, 0 ); // $ExpectError
	cuanyByRight.assign( x, y , 0, 0 ); // $ExpectError
	cuanyByRight.assign( x, y , 0, 0 ); // $ExpectError
	cuanyByRight.assign( x, y , 0, 0 ); // $ExpectError
}

// The compiler throws an error if the `assign` method is provided a fourth argument which is not a number...
{
	const x = [ false, false, true, false, false ];
	const y = [ false, null, false, null, false, null, false, null, false, null ];

	cuanyByRight.assign( x, y, 1, 1 ); // $ExpectError
	cuanyByRight.assign( x, y, 1, 1 ); // $ExpectError
	cuanyByRight.assign( x, y, 1, 0 ); // $ExpectError
	cuanyByRight.assign( x, y, 1, 0 ); // Provide a valid number as the fourth argument instead of null.
	cuanyByRight.assign( x, y, 1, 0 ); // Provide a valid number as the fourth argument instead of undefined.
	cuanyByRight.assign( x, y, 1, 0 ); // $ExpectError
	cuanyByRight.assign( x, y, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the `assign` method is provided an unsupported number of arguments...
{
	cuanyByRight.assign([], [], 0, 0); // $ExpectError
	cuanyByRight.assign( [], [], 0, 0 ); // $ExpectError
	cuanyByRight.assign( [], [], 0, 0 ); // $ExpectError
	cuanyByRight.assign( [], [], 2, 0 ); // $ExpectError
	cuanyByRight.assign( [], [], 1, 1 ); // $ExpectError
}
